AWSTemplateFormatVersion: "2010-09-09"
Description: Contains all the resources necessary for a single dataset

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pDeploymentInstance:
    Type: String
    Description: A string uniquely identifying this deployment in this AWS account
    Default: dev
  pStorageDeploymentInstance:
    Type: String
    Description: The string uniquely identifying a sdlf-foundations deployment in this AWS account
    Default: "" # see below comments
  pOrg:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pDomain:
    Description: Data domain name
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pBucketKey:
    Description: KMS key set as bucket key for the solutions' buckets
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pRawBucket:
    Description: Raw bucket
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pStageBucket:
    Description: Stage bucket
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pAnalyticsBucket:
    Description: Analytics bucket
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pArtifactsBucket:
    Description: S3 bucket used to store artifacts (from CICD or generated by data pipelines)
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pLakeFormationDataAccessRole:
    Description: https://docs.aws.amazon.com/lake-formation/latest/dg/registration-role.html
    Type: String
    Default: "" # if not provided, pStorageDeploymentInstance must be specified
  pDatasetName:
    Description: The name of the dataset (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,14}"
  pS3Prefix:
    Description: S3 prefix or full bucket if empty/not provided
    Type: String
    AllowedPattern: "[a-z0-9]*"
    Default: ""
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false

Conditions:
  FetchFromStorageSsm: !Not [!Equals [!Ref pStorageDeploymentInstance, ""]]
  IsS3Prefix: !Not [!Equals [!Ref pS3Prefix, ""]]
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Resources:
  ######## KMS #########
  rKMSInfraKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: !Sub SDLF ${pDatasetName} Infrastructure KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pDatasetName}-infra-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com

  rKMSInfraKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-kms-infra-key-${pDeploymentInstance}
      TargetKeyId: !Ref rKMSInfraKey

  rKMSInfraKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rKMSInfraKey/${pDeploymentInstance}
      Type: String
      Value: !GetAtt rKMSInfraKey.Arn
      Description: !Sub ${pDatasetName} KMS infrastructure key ARN

  rKMSDataKey:
    Type: AWS::KMS::Key
    Condition: IsS3Prefix
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      Description: !Sub SDLF ${pDatasetName} Data KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pDatasetName}-data-key-policy
        Statement:
          - Sid: Allow administration of the key
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Resource: "*"
          - Sid: Allow Lake Formation permissions
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Effect: Allow
            Principal:
              AWS: !If [FetchFromStorageSsm, !Sub "{{resolve:ssm:/sdlf/storage/rLakeFormationDataAccessRoleArn/${pStorageDeploymentInstance}}}", !Ref pLakeFormationDataAccessRole]
            Resource: "*"

  rKMSDataKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsS3Prefix
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-kms-data-key-${pDeploymentInstance}
      TargetKeyId: !Ref rKMSDataKey

  rKMSDataKeySsm:
    Type: AWS::SSM::Parameter
    Condition: IsS3Prefix
    Properties:
      Name: !Sub /sdlf/dataset/rKMSDataKey/${pDeploymentInstance}
      Type: String
      Value: !GetAtt rKMSDataKey.Arn
      Description: !Sub ${pDatasetName} KMS data key ARN

  ######## GLUE #########
  rGlueSecurityConfiguration:
    Type: AWS::Glue::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pDatasetName}-glue-security-config # TODO ${pDeploymentInstance}
      EncryptionConfiguration:
        CloudWatchEncryption:
          CloudWatchEncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        JobBookmarksEncryption:
          JobBookmarksEncryptionMode: CSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        S3Encryptions:
          - S3EncryptionMode: SSE-KMS
            KmsKeyArn: !If
              - IsS3Prefix
              - !GetAtt rKMSDataKey.Arn
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rKMSKey/${pStorageDeploymentInstance}}}", !Ref pBucketKey]

  rGlueSecurityConfigurationSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rGlueSecurityConfiguration/${pDeploymentInstance}
      Type: String
      Value: !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
      Description: !Sub Name of the ${pDatasetName} Glue security configuration

  rEMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pDatasetName}-emr-security-config # TODO ${pDeploymentInstance}
      SecurityConfiguration: !If
        - IsS3Prefix
        - !Sub |
            {
              "EncryptionConfiguration": {
                "EnableInTransitEncryption" : false,
                "EnableAtRestEncryption" : true,
                "AtRestEncryptionConfiguration" : {
                  "S3EncryptionConfiguration" : {
                    "EncryptionMode" : "SSE-KMS",
                    "AwsKmsKey": "${rKMSDataKey}"
                  },
                  "LocalDiskEncryptionConfiguration" : {
                    "EncryptionKeyProviderType" : "AwsKms",
                    "AwsKmsKey" : "${rKMSDataKey}",
                    "EnableEbsEncryption" : true
                  }
                }
              },
              "InstanceMetadataServiceConfiguration":{
                "MinimumInstanceMetadataServiceVersion": 2,
                "HttpPutResponseHopLimit": 1
              }
            }
        - !Sub |
            {
              "EncryptionConfiguration": {
                "EnableInTransitEncryption" : false,
                "EnableAtRestEncryption" : true,
                "AtRestEncryptionConfiguration" : {
                  "S3EncryptionConfiguration" : {
                    "EncryptionMode" : "SSE-KMS",
                    "AwsKmsKey": "${pBucketKey}"
                  },
                  "LocalDiskEncryptionConfiguration" : {
                    "EncryptionKeyProviderType" : "AwsKms",
                    "AwsKmsKey" : "${pBucketKey}",
                    "EnableEbsEncryption" : true
                  }
                }
              },
              "InstanceMetadataServiceConfiguration":{
                "MinimumInstanceMetadataServiceVersion": 2,
                "HttpPutResponseHopLimit": 1
              }
            }

  rEMRSecurityConfigurationSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rEMRSecurityConfiguration/${pDeploymentInstance}
      Type: String
      Value: !Ref rEMRSecurityConfiguration
      Description: !Sub Name of the ${pDatasetName} EMR security configuration

  rDatalakeCrawlerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf-${pDatasetName}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub sdlf-${pDatasetName}-glue-crawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*/*
                  - !Sub arn:${AWS::Partition}:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::crawler-public*
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:ListObjectsV2
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:PutObjectVersion
                Resource:
                  - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rRawBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pRawBucket}/${pS3Prefix}/*"]
                  - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rStageBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}/${pS3Prefix}/*"]
                  - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rAnalyticsBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pS3Prefix}/*"]
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:CreateGrant
                Resource: !If
                  - IsS3Prefix
                  - - !GetAtt rKMSInfraKey.Arn
                    - !GetAtt rKMSDataKey.Arn
                    - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rKMSKey/${pStorageDeploymentInstance}}}", !Ref pBucketKey]
                  - - !GetAtt rKMSInfraKey.Arn
                    - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rKMSKey/${pStorageDeploymentInstance}}}", !Ref pBucketKey]
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess # W11 exception
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:AssociateKmsKey
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/crawlers-role/sdlf-${pDatasetName}/*

  rDatalakeCrawlerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rDatalakeCrawlerRole/${pDeploymentInstance}
      Type: String
      Value: !GetAtt rDatalakeCrawlerRole.Arn
      Description: ARN of the Crawler role

  # rLakeFormationTag:
  #   Type: AWS::LakeFormation::Tag
  #   Properties:
  #     CatalogId: !Ref AWS::AccountId
  #     TagKey: "sdlf:dataset"
  #     TagValues:
  #       - !Ref pDatasetName

  rRawGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !Sub "${pDatasetName} raw metadata catalog"
        Name: !If
          - FetchFromStorageSsm
          - !Sub "{{resolve:ssm:/sdlf/storage/rOrganization/${pStorageDeploymentInstance}}}_{{resolve:ssm:/sdlf/storage/rDomain/${pStorageDeploymentInstance}}}_${pDatasetName}_raw"
          - !Sub ${pOrg}_${pDomain}_${pDatasetName}_raw

  rRawGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rRawGlueDataCatalog/${pDeploymentInstance}
      Type: String
      Value: !Ref rRawGlueDataCatalog
      Description: !Sub "${pDatasetName} raw metadata catalog"

  # rRawGlueDataCatalogLakeFormationTag:
  #   Type: AWS::LakeFormation::TagAssociation
  #   Properties:
  #     Resource:
  #       Database:
  #         CatalogId: !Ref AWS::AccountId
  #         Name: !Ref rRawGlueDataCatalog
  #     LFTags:
  #       - CatalogId: !Ref AWS::AccountId
  #         TagKey: "sdlf:dataset"
  #         TagValues:
  #           - !Ref pDatasetName

  rRawGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt rDatalakeCrawlerRole.Arn
      CrawlerSecurityConfiguration: !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
      DatabaseName: !Ref rRawGlueDataCatalog
      Name: !Sub sdlf-${pDatasetName}-raw-crawler
      Targets:
        S3Targets:
          - Path: !If [FetchFromStorageSsm, !Sub "s3://{{resolve:ssm:/sdlf/storage/rRawBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}", !Sub "s3://${pRawBucket}/${pS3Prefix}"]

  rRawGlueCrawlerGlueLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rRawGlueDataCatalog

  rRawGlueCrawlerS3LakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rRawBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/", !Sub "arn:${AWS::Partition}:s3:::${pRawBucket}/${pS3Prefix}/"]

  rRawGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rRawGlueCrawler/${pDeploymentInstance}
      Type: String
      Value: !Ref rRawGlueCrawler
      Description: !Sub "${pDatasetName} Raw Glue crawler"

  rStageGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !Sub "${pDatasetName} stage metadata catalog"
        Name: !If
          - FetchFromStorageSsm
          - !Sub "{{resolve:ssm:/sdlf/storage/rOrganization/${pStorageDeploymentInstance}}}_{{resolve:ssm:/sdlf/storage/rDomain/${pStorageDeploymentInstance}}}_${pDatasetName}_stage"
          - !Sub ${pOrg}_${pDomain}_${pDatasetName}_stage

  rStageGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rStageGlueDataCatalog/${pDeploymentInstance}
      Type: String
      Value: !Ref rStageGlueDataCatalog
      Description: !Sub "${pDatasetName} stage metadata catalog"

  # rStageGlueDataCatalogLakeFormationTag:
  #   Type: AWS::LakeFormation::TagAssociation
  #   Properties:
  #     Resource:
  #       Database:
  #         CatalogId: !Ref AWS::AccountId
  #         Name: !Ref rStageGlueDataCatalog
  #     LFTags:
  #       - CatalogId: !Ref AWS::AccountId
  #         TagKey: "sdlf:dataset"
  #         TagValues:
  #           - !Ref pDatasetName

  rStageGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt rDatalakeCrawlerRole.Arn
      CrawlerSecurityConfiguration: !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
      DatabaseName: !Ref rStageGlueDataCatalog
      Name: !Sub sdlf-${pDatasetName}-stage-crawler
      Targets:
        S3Targets:
          - Path: !If [FetchFromStorageSsm, !Sub "s3://{{resolve:ssm:/sdlf/storage/rStageBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}", !Sub "s3://${pStageBucket}/${pS3Prefix}"]

  rStageGlueCrawlerGlueLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rStageGlueDataCatalog

  rStageGlueCrawlerS3LakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rStageBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/", !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}/${pS3Prefix}/"]

  rStageGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rStageGlueCrawler/${pDeploymentInstance}
      Type: String
      Value: !Ref rStageGlueCrawler
      Description: !Sub "${pDatasetName} Stage Glue crawler"

  rAnalyticsGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !Sub "${pDatasetName} analytics metadata catalog"
        Name: !If
          - FetchFromStorageSsm
          - !Sub "{{resolve:ssm:/sdlf/storage/rOrganization/${pStorageDeploymentInstance}}}_{{resolve:ssm:/sdlf/storage/rDomain/${pStorageDeploymentInstance}}}_${pDatasetName}_analytics"
          - !Sub ${pOrg}_${pDomain}_${pDatasetName}_analytics

  rAnalyticsGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rAnalyticsGlueDataCatalog/${pDeploymentInstance}
      Type: String
      Value: !Ref rAnalyticsGlueDataCatalog
      Description: !Sub "${pDatasetName} analytics metadata catalog"

  # rAnalyticsGlueDataCatalogLakeFormationTag:
  #   Type: AWS::LakeFormation::TagAssociation
  #   Properties:
  #     Resource:
  #       Database:
  #         CatalogId: !Ref AWS::AccountId
  #         Name: !Ref rAnalyticsGlueDataCatalog
  #     LFTags:
  #       - CatalogId: !Ref AWS::AccountId
  #         TagKey: "sdlf:dataset"
  #         TagValues:
  #           - !Ref pDatasetName

  rAnalyticsGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt rDatalakeCrawlerRole.Arn
      CrawlerSecurityConfiguration: !Sub sdlf-${pDatasetName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
      DatabaseName: !Ref rAnalyticsGlueDataCatalog
      Name: !Sub sdlf-${pDatasetName}-analytics-crawler
      Targets:
        S3Targets:
          - Path: !If [FetchFromStorageSsm, !Sub "s3://{{resolve:ssm:/sdlf/storage/rAnalyticsBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}", !Sub "s3://${pAnalyticsBucket}/${pS3Prefix}"]

  rAnalyticsGlueCrawlerGlueLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rAnalyticsGlueDataCatalog

  rAnalyticsGlueCrawlerS3LakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rAnalyticsBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/", !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pS3Prefix}/"]

  rAnalyticsGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rAnalyticsGlueCrawler/${pDeploymentInstance}
      Type: String
      Value: !Ref rAnalyticsGlueCrawler
      Description: !Sub "${pDatasetName} Analytics Glue crawler"

  # rLakeFormationTagTablesPermissions: # allows sdlf pipelines to grant permissions on tables associated with this lf-tag
  #   Type: AWS::LakeFormation::PrincipalPermissions
  #   Properties:
  #     Principal:
  #       DataLakePrincipalIdentifier: !If
  #         - CicdRoleProvided
  #         - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pCicdRole}
  #         - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-cicd-team-${pDatasetName}
  #     Resource:
  #       LFTagPolicy:
  #         CatalogId: !Ref AWS::AccountId
  #         ResourceType: TABLE
  #         Expression:
  #           - TagKey: !Ref rLakeFormationTag
  #             TagValues:
  #               - !Ref pDatasetName
  #     Permissions:
  #       - ALL
  #     PermissionsWithGrantOption:
  #       - ALL


  ######## EVENTBRIDGE #########
  rEventBus:
    Type: AWS::Events::EventBus
    Properties:
        Name: !Sub sdlf-${pDatasetName}

  rEventBusSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rEventBus/${pDeploymentInstance}
      Type: String
      Value: !Ref rEventBus
      Description: !Sub Name of the ${pDatasetName} event bus

  rScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: !Sub sdlf-${pDatasetName}

  rScheduleGroupSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rScheduleGroup/${pDeploymentInstance}
      Type: String
      Value: !Ref rScheduleGroup
      Description: !Sub Name of the ${pDatasetName} schedule group

  rForwardEventBusTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cicd-events-trigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource:
                  - !GetAtt rEventBus.Arn

  rForwardEventBusRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - prefix: aws.
        account:
          - !Ref AWS::AccountId
        region:
          - !Ref AWS::Region
      Targets:
        - Arn: !GetAtt rEventBus.Arn
          RoleArn: !GetAtt rForwardEventBusTriggerRole.Arn
          Id: default-to-sdlf-dataset

  ######## IAM #########
  rIamManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: |-
              Condition applied to restrict access, and the KMS keys do not exist at this stage
              The other actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf/${pDatasetName}/ # keep this path for the dataset's permissions boundary policy only
      Description: Team Permissions Boundary IAM policy. Add/remove permissions based on company policy and associate it to federated role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowConsoleListBuckets
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: !Sub arn:${AWS::Partition}:s3:::*
          - Sid: AllowTeamBucketList
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rArtifactsBucket/${pStorageDeploymentInstance}}}", !Sub "arn:${AWS::Partition}:s3:::${pArtifactsBucket}"]
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rRawBucket/${pStorageDeploymentInstance}}}", !Sub "arn:${AWS::Partition}:s3:::${pRawBucket}"]
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rStageBucket/${pStorageDeploymentInstance}}}", !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}"]
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rAnalyticsBucket/${pStorageDeploymentInstance}}}", !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}"]
          - Sid: AllowTeamPrefixActions
            Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rArtifactsBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pArtifactsBucket}/${pS3Prefix}/*"]
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rRawBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pRawBucket}/${pS3Prefix}/*"]
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rStageBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}/${pS3Prefix}/*"]
              - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rAnalyticsBucket/${pStorageDeploymentInstance}}}/${pS3Prefix}/*", !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pS3Prefix}/*"]
          - Sid: AllowTeamKMSDataKeyUsage
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !If
              - IsS3Prefix
              - - !GetAtt rKMSInfraKey.Arn
                - !GetAtt rKMSDataKey.Arn
                - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rKMSKey/${pStorageDeploymentInstance}}}", !Ref pBucketKey]
              - - !GetAtt rKMSInfraKey.Arn
                - !If [FetchFromStorageSsm, !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/sdlf/storage/rKMSKey/${pStorageDeploymentInstance}}}", !Ref pBucketKey]
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sdlf/*
          - Sid: AllowDynamoAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sdlf-*
          - Sid: AllowSQSManagement
            Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:List*
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pDatasetName}-*
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pDatasetName}-*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-${pDatasetName}/sdlf-*
            Condition:
              StringEquals:
                "iam:PassedToService":
                  - glue.amazonaws.com
          - Effect: Allow
            Action:
              - glue:GetSecurityConfiguration # W13 exception
            Resource: "*"
          - Effect: Allow
            Action:
              - glue:GetTable
              - glue:StartCrawler
              - glue:GetCrawler
              - glue:GetJobRun
              - glue:GetJobRuns
              - glue:StartJobRun
              - glue:StartDataQualityRule*
              - glue:GetDataQualityRule*
            Resource:
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
              - !If
                - FetchFromStorageSsm
                - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/{{resolve:ssm:/sdlf/storage/rOrganization/${pStorageDeploymentInstance}}}_{{resolve:ssm:/sdlf/storage/rDomain/${pStorageDeploymentInstance}}}_${pDatasetName}_*"
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${pOrg}_${pDomain}_${pDatasetName}_*
              - !If
                - FetchFromStorageSsm
                - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/sdlf/storage/rOrganization/${pStorageDeploymentInstance}}}_{{resolve:ssm:/sdlf/storage/rDomain/${pStorageDeploymentInstance}}}_${pDatasetName}_*"
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${pOrg}_${pDomain}_${pDatasetName}_*
              - !If
                - FetchFromStorageSsm
                - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/{{resolve:ssm:/sdlf/storage/rOrganization/${pStorageDeploymentInstance}}}-{{resolve:ssm:/sdlf/storage/rDomain/${pStorageDeploymentInstance}}}-${pDatasetName}_*"
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/${pOrg}-${pDomain}-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:dataQualityRuleset/* # glue:StartDataQualityRuleRecommendationRun requires dataQualityRuleset/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
              - logs:AssociateKmsKey
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pDatasetName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/jobs/sdlf-${pDatasetName}-*
          - Sid: AllowCloudFormationReadOnlyAccess
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStackResources
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack:sdlf-${pDatasetName}:*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pDatasetName}-*
          - Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctions* # Step Functions managed rules: https://docs.aws.amazon.com/step-functions/latest/dg/service-integration-iam-templates.html#connect-iam-sync-async
          - Effect: Allow
            Action:
              - emr-serverless:CreateApplication
              - emr-serverless:GetApplication
            Resource:
              - !Sub arn:${AWS::Partition}:emr-serverless:${AWS::Region}:${AWS::AccountId}:/applications/*
          - !If
            - RunInVpc
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface # W13 condition applied
                - ec2:DescribeNetworkInterfaces # W13 exception
                - ec2:DeleteNetworkInterface # W13 condition applied
                - ec2:AssignPrivateIpAddresses # W13 condition applied
                - ec2:UnassignPrivateIpAddresses # W13 condition applied
                - ec2:DescribeSubnets # W13 exception
                - ec2:DescribeSecurityGroups # W13 exception
                - ec2:DescribeVpcEndpoints # W13 exception
                - ec2:DescribeRouteTables # W13 exception
                - ec2:CreateTags # W13 condition applied
                - ec2:DeleteTags # W13 condition applied
              Resource:
                - "*"
              Condition:
                ArnEqualsIfExists:
                  "ec2:Vpc":
                    - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:{{resolve:ssm:/SDLF/VPC/VpcAccountId}}:vpc/{{resolve:ssm:/SDLF/VPC/VpcId}}"
                "ForAllValues:StringEqualsIfExists":
                  "aws:TagKeys":
                    - aws-glue-service-resource
            - !Ref "AWS::NoValue"
          - !If
            - RunInVpc
            - Effect: Allow
              Action:
                - Glue:GetConnection
              Resource:
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:connection/sdlf-${pDatasetName}-glue-conn-*
            - !Ref "AWS::NoValue"

  rIamManagedPolicySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rIamManagedPolicy/${pDeploymentInstance}
      Type: String
      Value: !Ref rIamManagedPolicy
      Description: The permissions boundary IAM Managed policy for the team

  rDynamoPipelineExecutionHistory:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: pipeline
          AttributeType: S
        - AttributeName: last_updated_timestamp
          AttributeType: S
        - AttributeName: execution_date
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: status_last_updated_timestamp
          AttributeType: S
        - AttributeName: dataset
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: pipeline-last-updated-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: execution_date-status-index
          KeySchema:
            - AttributeName: execution_date
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-execution_date-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: execution_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: execution_date-last_updated-index
          KeySchema:
            - AttributeName: execution_date
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: status-last_updated-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-status_last_updated-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: status_last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: dataset-status_last_updated_timestamp-index
          KeySchema:
            - AttributeName: dataset
              KeyType: HASH
            - AttributeName: status_last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKMSInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  rDynamoPipelineExecutionHistorySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rDynamoPipelineExecutionHistory/${pDeploymentInstance}
      Type: String
      Value: !Ref rDynamoPipelineExecutionHistory
      Description: Name of the DynamoDB used to store pipeline execution metadata

  rDynamoManifests:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: dataset_name
          KeyType: HASH
        - AttributeName: datafile_name
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: dataset_name
          AttributeType: S
        - AttributeName: datafile_name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKMSInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  rDynamoManifestsSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sdlf/dataset/rDynamoManifests/${pDeploymentInstance}
      Type: String
      Value: !Ref rDynamoManifests
      Description: Name of the DynamoDB used to store manifest process metadata

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oDeploymentInstance:
    Description: A string uniquely identifying this deployment in this AWS account
    Value: !Ref pDeploymentInstance
