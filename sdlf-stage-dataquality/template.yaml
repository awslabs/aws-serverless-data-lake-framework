AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Data Quality Stage

Parameters:
  pPipelineReference:
    Description: Workaround for CloudFormation resolve:ssm not updating on stack update (https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/844)
    Type: String
    Default: none
  pOrg:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pDomain}}"
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pPipeline:
    Description: The name of the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pEnv:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pStageName:
    Description: Name of the stage (all lowercase, hyphen allowed, no other symbols or spaces)
    Type: String
    AllowedPattern: "[a-zA-Z0-9\\-]{1,12}"
  pTriggerType:
    Description: Trigger type of the stage (event or schedule)
    Type: String
    Default: event
    AllowedValues: [event, schedule]
  pSchedule:
    Description: Cron expression when trigger type is schedule
    Type: String
    Default: "cron(*/5 * * * ? *)"
  pEventPattern:
    Description: Event pattern to match from previous stage
    Type: String
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pCloudWatchLogsRetentionInDays:
    Description: The number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
  pEnableTracing:
    Description: Flag for whether XRay tracing is enabled
    Type: String
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false
  # pVpcSecurityGroupIds and pVpcSubnetIds are passed explicitly (unlike in sdlf-cicd/template-cicd-sdlf-repositories.yaml for example)
  # due to Fn::ImportValue not being accepted in CloudFormation modules template fragments
  pVpcSecurityGroupIds:
    Description: VPC Security Groups Ids
    Type: String
    Default: ""
  pVpcSubnetIds:
    Description: VPC Subnet Ids
    Type: String
    Default: ""

Conditions:
  EnableTracing: !Equals [!Ref pEnableTracing, "true"]
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler
    Layers:
      - "{{resolve:ssm:/SDLF/Lambda/LatestDatalakeLibraryLayer}}"
    Environment:
      Variables:
        TEAM: !Ref pTeamName
        DATASET: !Ref pDataset
        PIPELINE: !Ref pPipeline
        PIPELINE_STAGE: !Ref pStageName
        ORG: !Ref pOrg
        DOMAIN: !Ref pDomain
        ENV: !Ref pEnv
    KmsKeyArn: !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"
    VpcConfig: !If
      - RunInVpc
      - SecurityGroupIds: !Split [",", !Ref pVpcSecurityGroupIds]
        SubnetIds: !Split [",", !Ref pVpcSubnetIds]
      - !Ref "AWS::NoValue"

Resources:
  rPipelineInterface:
    Type: awslabs::sdlf::pipeline::MODULE
    Properties:
      pPipelineReference: !Ref pPipelineReference
      pOrg: !Ref pOrg
      pDomain: !Ref pDomain
      pEnv: !Ref pEnv
      pTeamName: !Ref pTeamName
      pPipelineName: !Ref pPipeline
      pStageName: !Ref pStageName
      pTriggerType: !Ref pTriggerType
      pSchedule: !Ref pSchedule
      pEventPattern: !Ref pEventPattern
      pLambdaRoutingStep: !GetAtt rLambdaRoutingStep.Arn

  ######## IAM #########
  # Common policy
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-${pPipeline}-*
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"

  # Routing Step Role
  rRoleLambdaExecutionRoutingStep:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      PermissionsBoundary: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/TeamPermissionsBoundary}}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-${pPipeline}-routing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref rStateMachine
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                  - sqs:ListDeadLetterSourceQueues
                  - sqs:ListQueueTags
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*

  rStatesExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The actions with "*" are all ones that do not have resource limitations associated with them
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      PermissionsBoundary: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/TeamPermissionsBoundary}}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-data-quality-states-execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-${pPipeline}-*
              - Effect: Allow
                Action:
                  - glue:StartDataQualityRuleRecommendationRun
                  - glue:GetDataQualityRuleRecommendationRun
                  - glue:StartDataQualityRulesetEvaluationRun
                  - glue:GetDataQualityRulesetEvaluationRun
                Resource:
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:dataQualityRuleset/* # glue:StartDataQualityRuleRecommendationRun requires dataQualityRuleset/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
                Condition:
                  StringEquals:
                    "iam:PassedToService":
                      - glue.amazonaws.com
              - Effect: Allow
                Action:
                  - glue:GetTable
                Resource:
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${pOrg}_${pDomain}_${pEnv}_${pTeamName}_*
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${pOrg}_${pDomain}_${pEnv}_${pTeamName}_*
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource:
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments # W11 exception
                  - xray:PutTelemetryRecords # W11 exception
                  - xray:GetSamplingRules # W11 exception
                  - xray:GetSamplingTargets # W11 exception
                Resource: "*"

  rStatesExecutionLakeFormationPermissions:
    Type: AWS::LakeFormation::PrincipalPermissions
    Properties:
      Principal:
        DataLakePrincipalIdentifier: !GetAtt rStatesExecutionRole.Arn
      Resource:
        LFTagPolicy:
          CatalogId: !Ref AWS::AccountId
          ResourceType: TABLE
          Expression:
            - TagKey: !Sub "sdlf:team:${pTeamName}"
              TagValues:
                - !Sub ${pTeamName}
      Permissions:
        - SELECT
      PermissionsWithGrantOption: []

  ######## LAMBDA FUNCTIONS #########
  rLambdaRoutingStep:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Permissions to write CloudWatch Logs are granted by rLambdaCommonPolicy
    Properties:
      CodeUri: ./lambda/stage-routing/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-routing-${pStageName}
      Description: Checks if items are to be processed and route them to state machine
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          PIPELINE: !Ref pPipeline
          PIPELINE_STAGE: !Ref pStageName
          ORG: !Ref pOrg
          DOMAIN: !Ref pDomain
          ENV: !Ref pEnv
      Role: !GetAtt rRoleLambdaExecutionRoutingStep.Arn

  rLambdaRoutingStepLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaRoutingStep}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"

  rLambdaRedriveStep:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Permissions to write CloudWatch Logs are granted by rLambdaCommonPolicy
    Properties:
      CodeUri: ./lambda/stage-redrive/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-redrive-${pStageName}
      Environment:
        Variables:
          TEAM: !Ref pTeamName
          PIPELINE: !Ref pPipeline
          STAGE: StageB
      Description: Redrives Failed messages to the routing queue
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionRoutingStep.Arn

  rLambdaRedriveStepLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaRedriveStep}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"

  ######## STEP FUNCTIONS #########
  rStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub sdlf-${pTeamName}-${pPipeline}-sm-${pStageName}
      DefinitionUri: ./state-machine/data-quality.asl.json
      DefinitionSubstitutions:
        dataQualityRole: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
        s3DataQualityResults: !Sub "s3://${pStageBucket}/post-stage/${pTeamName}/"
      Role: !GetAtt rStatesExecutionRole.Arn
      Tracing:
        Enabled: !If [EnableTracing, true, false]

  ######## SSM #########
  rStateMachineSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/SM/${pTeamName}/${pPipeline}${pStageName}SM
      Type: String
      Value: !Ref rStateMachine
      Description: !Sub "ARN of the ${pStageName} ${pTeamName} ${pPipeline} State Machine"

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
